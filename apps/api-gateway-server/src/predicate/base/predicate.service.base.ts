/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Predicate as PrismaPredicate } from "@prisma/client";

export class PredicateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PredicateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.predicate.count(args);
  }

  async predicates(
    args: Prisma.PredicateFindManyArgs
  ): Promise<PrismaPredicate[]> {
    return this.prisma.predicate.findMany(args);
  }
  async predicate(
    args: Prisma.PredicateFindUniqueArgs
  ): Promise<PrismaPredicate | null> {
    return this.prisma.predicate.findUnique(args);
  }
  async createPredicate(
    args: Prisma.PredicateCreateArgs
  ): Promise<PrismaPredicate> {
    return this.prisma.predicate.create(args);
  }
  async updatePredicate(
    args: Prisma.PredicateUpdateArgs
  ): Promise<PrismaPredicate> {
    return this.prisma.predicate.update(args);
  }
  async deletePredicate(
    args: Prisma.PredicateDeleteArgs
  ): Promise<PrismaPredicate> {
    return this.prisma.predicate.delete(args);
  }
}
