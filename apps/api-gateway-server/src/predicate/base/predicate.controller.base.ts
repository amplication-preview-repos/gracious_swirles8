/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PredicateService } from "../predicate.service";
import { PredicateCreateInput } from "./PredicateCreateInput";
import { Predicate } from "./Predicate";
import { PredicateFindManyArgs } from "./PredicateFindManyArgs";
import { PredicateWhereUniqueInput } from "./PredicateWhereUniqueInput";
import { PredicateUpdateInput } from "./PredicateUpdateInput";

export class PredicateControllerBase {
  constructor(protected readonly service: PredicateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Predicate })
  async createPredicate(
    @common.Body() data: PredicateCreateInput
  ): Promise<Predicate> {
    return await this.service.createPredicate({
      data: data,
      select: {
        createdAt: true,
        id: true,
        path: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Predicate] })
  @ApiNestedQuery(PredicateFindManyArgs)
  async predicates(@common.Req() request: Request): Promise<Predicate[]> {
    const args = plainToClass(PredicateFindManyArgs, request.query);
    return this.service.predicates({
      ...args,
      select: {
        createdAt: true,
        id: true,
        path: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Predicate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async predicate(
    @common.Param() params: PredicateWhereUniqueInput
  ): Promise<Predicate | null> {
    const result = await this.service.predicate({
      where: params,
      select: {
        createdAt: true,
        id: true,
        path: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Predicate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePredicate(
    @common.Param() params: PredicateWhereUniqueInput,
    @common.Body() data: PredicateUpdateInput
  ): Promise<Predicate | null> {
    try {
      return await this.service.updatePredicate({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          path: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Predicate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePredicate(
    @common.Param() params: PredicateWhereUniqueInput
  ): Promise<Predicate | null> {
    try {
      return await this.service.deletePredicate({
        where: params,
        select: {
          createdAt: true,
          id: true,
          path: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
