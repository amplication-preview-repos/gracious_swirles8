/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Predicate } from "./Predicate";
import { PredicateCountArgs } from "./PredicateCountArgs";
import { PredicateFindManyArgs } from "./PredicateFindManyArgs";
import { PredicateFindUniqueArgs } from "./PredicateFindUniqueArgs";
import { CreatePredicateArgs } from "./CreatePredicateArgs";
import { UpdatePredicateArgs } from "./UpdatePredicateArgs";
import { DeletePredicateArgs } from "./DeletePredicateArgs";
import { PredicateService } from "../predicate.service";
@graphql.Resolver(() => Predicate)
export class PredicateResolverBase {
  constructor(protected readonly service: PredicateService) {}

  async _predicatesMeta(
    @graphql.Args() args: PredicateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Predicate])
  async predicates(
    @graphql.Args() args: PredicateFindManyArgs
  ): Promise<Predicate[]> {
    return this.service.predicates(args);
  }

  @graphql.Query(() => Predicate, { nullable: true })
  async predicate(
    @graphql.Args() args: PredicateFindUniqueArgs
  ): Promise<Predicate | null> {
    const result = await this.service.predicate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Predicate)
  async createPredicate(
    @graphql.Args() args: CreatePredicateArgs
  ): Promise<Predicate> {
    return await this.service.createPredicate({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Predicate)
  async updatePredicate(
    @graphql.Args() args: UpdatePredicateArgs
  ): Promise<Predicate | null> {
    try {
      return await this.service.updatePredicate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Predicate)
  async deletePredicate(
    @graphql.Args() args: DeletePredicateArgs
  ): Promise<Predicate | null> {
    try {
      return await this.service.deletePredicate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
